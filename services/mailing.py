from aiogram import Bot
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from services.database import db
from datetime import datetime, timedelta
import asyncio
import config

class MailingService:
    def __init__(self, bot: Bot):
        self.bot = bot

    def _create_keyboard(self, buttons):
        if not buttons:
            return None
            
        keyboard = InlineKeyboardBuilder()
        for button in buttons:
            if button.get('url'):
                keyboard.add(InlineKeyboardButton(
                    text=button['text'], 
                    url=button['url']
                ))
        return keyboard.as_markup()

    async def send_mailing(self, mailing_id: int, user_id: int, target_group: str):
        mailing = db.get_mailing(mailing_id)
        if not mailing:
            return False, None

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db.add_mailing_stats(mailing_id, user_id, target_group)
        keyboard = self._create_keyboard(mailing['buttons'])

        try:
            if mailing['message_type'] == "text":
                message = await self.bot.send_message(
                    chat_id=user_id,
                    text=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "photo":
                message = await self.bot.send_photo(
                    chat_id=user_id,
                    photo=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "video":
                message = await self.bot.send_video(
                    chat_id=user_id,
                    video=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "document":
                message = await self.bot.send_document(
                    chat_id=user_id,
                    document=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "voice":
                message = await self.bot.send_voice(
                    chat_id=user_id,
                    voice=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "video_note":
                message = await self.bot.send_video_note(
                    chat_id=user_id,
                    video_note=mailing['media_file_id']
                )
                # –î–ª—è –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                if mailing['message_text']:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=mailing['message_text'],
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db.update_mailing_stats(stats.id, 
                sent=True, 
                delivered=True,
                delivered_at=datetime.utcnow()
            )
            
            return True, message.message_id
            
        except TelegramForbiddenError as e:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            print(f"User {user_id} blocked the bot")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None
        except TelegramBadRequest as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram
            print(f"Failed to send to {user_id}: {e}")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None
        except Exception as e:
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            print(f"Error sending to {user_id}: {e}")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None

    async def broadcast_mailing(self, mailing_id: int, target_group: str = "all"):
        mailing = db.get_mailing(mailing_id)
        if not mailing or mailing['status'] != "active":
            return False, 0, 0

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
        if target_group == "all":
            users = db.get_all_users()
            target_name = "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif target_group == "active":
            users = db.get_active_users_today()
            target_name = "–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è"
        elif target_group == "new":
            users = db.get_new_users(days=7)  # –ù–æ–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            target_name = "–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        else:
            users = db.get_all_users()
            target_name = "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

        if not users:
            return False, 0, 0

        success_count = 0
        total_count = len(users)
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_message = await self.bot.send_message(
            chat_id=config.ADMIN_IDS[0],  # –ü–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
            text=f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
                 f"üì® –†–∞—Å—Å—ã–ª–∫–∞: {mailing['title']}\n"
                 f"üéØ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_name}\n"
                 f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_count}\n"
                 f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_count} (0%)"
        )
        
        for index, user in enumerate(users):
            success, _ = await self.send_mailing(
                mailing_id=mailing_id,
                user_id=user.user_id,
                target_group=target_group
            )
            
            if success:
                success_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–∞–∂–¥—ã–µ 10%
            if (index + 1) % 10 == 0 or index == total_count - 1:
                progress = (index + 1) / total_count * 100
                try:
                    await progress_message.edit_text(
                        f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"üì® –†–∞—Å—Å—ã–ª–∫–∞: {mailing['title']}\n"
                        f"üéØ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_name}\n"
                        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {index + 1}/{total_count} ({progress:.1f}%)\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}"
                    )
                except:
                    pass
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
            await asyncio.sleep(0.05)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        try:
            await progress_message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üì® –†–∞—Å—Å—ã–ª–∫–∞: {mailing['title']}\n"
                f"üéØ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_name}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_count}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {success_rate:.1f}%",
                parse_mode="HTML"
            )
        except:
            pass
        
        return True, success_count, total_count