from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.database import db
from utils.helpers import get_mailing_type_keyboard, get_back_keyboard, format_mailing_preview, get_mailing_preview_keyboard, get_mailing_actions_keyboard
import config

router = Router()

class MailingConstructor(StatesGroup):
    waiting_for_title = State()
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_confirmation = State()
    editing_title = State()
    editing_text = State()
    editing_media = State()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "create_mailing")
async def create_mailing_start(callback: CallbackQuery, state: FSMContext):
    if not callback.from_user.id in config.ADMIN_IDS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(MailingConstructor.waiting_for_title)
    await callback.message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_back_keyboard("admin_mailings"),
        parse_mode="HTML"
    )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(MailingConstructor.waiting_for_title)
async def mailing_get_title(message: Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    await state.update_data(title=message.text)
    await state.set_state(MailingConstructor.waiting_for_text)
    
    await message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É:",
        reply_markup=get_back_keyboard("admin_mailings")
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@router.message(MailingConstructor.waiting_for_text)
async def mailing_get_text(message: Message, state: FSMContext):
    if not message.html_text and not message.text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
        
    text_content = message.html_text or message.text
    await state.update_data(message_text=text_content)
    await state.set_state(MailingConstructor.waiting_for_media)
    
    await message.answer(
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_mailing_type_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
@router.callback_query(MailingConstructor.waiting_for_media, F.data.startswith("mailing_type_"))
async def mailing_select_media_type(callback: CallbackQuery, state: FSMContext):
    media_type = callback.data.replace("mailing_type_", "")
    
    await state.update_data(message_type=media_type)
    
    if media_type == "text":
        await state.update_data(media_file_id=None)
        await mailing_finalize(callback, state)
    else:
        media_names = {
            "photo": "üñºÔ∏è —Ñ–æ—Ç–æ",
            "video": "üé• –≤–∏–¥–µ–æ", 
            "document": "üìé –¥–æ–∫—É–º–µ–Ω—Ç",
            "voice": "üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "video_note": "üìπ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        }
        
        await callback.message.edit_text(
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_names.get(media_type, '–º–µ–¥–∏–∞')} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_back_keyboard("admin_mailings")
        )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
@router.message(
    MailingConstructor.waiting_for_media,
    F.content_type.in_({
        ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT,
        ContentType.VOICE, ContentType.VIDEO_NOTE
    })
)
async def mailing_get_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media_type = data.get('message_type')
    
    media_file_id = None
    valid_content = False
    
    if media_type == "photo" and message.photo:
        media_file_id = message.photo[-1].file_id
        valid_content = True
    elif media_type == "video" and message.video:
        media_file_id = message.video.file_id
        valid_content = True
    elif media_type == "document" and message.document:
        media_file_id = message.document.file_id
        valid_content = True
    elif media_type == "voice" and message.voice:
        media_file_id = message.voice.file_id
        valid_content = True
    elif media_type == "video_note" and message.video_note:
        media_file_id = message.video_note.file_id
        valid_content = True
    
    if valid_content and media_file_id:
        await state.update_data(media_file_id=media_file_id)
        await mailing_finalize(message, state)
    else:
        await message.answer(f"‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è: {media_type}")

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def mailing_finalize(update, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î
    mailing = db.create_mailing(
        title=data['title'],
        message_text=data['message_text'],
        message_type=data.get('message_type', 'text'),
        media_file_id=data.get('media_file_id'),
        status="draft"
    )
    
    if not mailing:
        if update.__class__.__name__ == "CallbackQuery":
            await update.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        else:
            await update.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return
    
    await state.update_data(mailing_id=mailing['id'])
    await state.set_state(MailingConstructor.waiting_for_confirmation)
    
    preview_text = format_mailing_preview(mailing)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if update.__class__.__name__ == "CallbackQuery":
        message = update.message
        await message.answer(
            preview_text,
            parse_mode="HTML",
            reply_markup=get_mailing_preview_keyboard(mailing['id'])
        )
    else:
        message = update
        await message.answer(
            preview_text,
            parse_mode="HTML",
            reply_markup=get_mailing_preview_keyboard(mailing['id'])
        )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
@router.callback_query(F.data.startswith("save_draft_"))
async def save_mailing_draft(callback: CallbackQuery, state: FSMContext):
    mailing_id = int(callback.data.replace("save_draft_", ""))
    db.change_mailing_status(mailing_id, "draft")
    await state.clear()
    
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    await callback.message.answer(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏'",
        reply_markup=get_back_keyboard("admin_mailings")
    )

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("activate_mailing_"))
async def activate_mailing(callback: CallbackQuery, state: FSMContext):
    mailing_id = int(callback.data.replace("activate_mailing_", ""))
    db.change_mailing_status(mailing_id, "active")
    await state.clear()
    
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    await callback.message.answer(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'",
        reply_markup=get_back_keyboard("admin_mailings")
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É
@router.callback_query(F.data.startswith("send_now_"))
async def send_mailing_now(callback: CallbackQuery, state: FSMContext, bot: Bot):
    mailing_id = int(callback.data.replace("send_now_", ""))
    await state.clear()
    
    from services.mailing import MailingService
    mailing_service = MailingService(bot)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    await callback.message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")
    
    success, success_count, total_count = await mailing_service.broadcast_mailing(
        mailing_id=mailing_id,
        target_group="all"
    )
    
    if success:
        await callback.message.answer(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{total_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"üìä –£—Å–ø–µ—à–Ω—ã—Ö: {(success_count/total_count*100 if total_count > 0 else 0):.1f}%\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫'",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_mailings")
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("view_mailing_"))
async def view_mailing(callback: CallbackQuery):
    mailing_id = int(callback.data.replace("view_mailing_", ""))
    mailing = db.get_mailing(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    preview_text = format_mailing_preview(mailing)
    await callback.message.answer(
        preview_text,
        parse_mode="HTML",
        reply_markup=get_mailing_actions_keyboard(mailing_id, mailing['status'])
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("edit_mailing_"))
async def edit_mailing_start(callback: CallbackQuery, state: FSMContext):
    mailing_id = int(callback.data.replace("edit_mailing_", ""))
    mailing = db.get_mailing(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.update_data(editing_mailing_id=mailing_id)
    await state.set_state(MailingConstructor.editing_title)
    
    await callback.message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{mailing['title']}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML",
        reply_markup=get_back_keyboard(f"view_mailing_{mailing_id}")
    )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(MailingConstructor.editing_title)
async def edit_mailing_title(message: Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    
    db.update_mailing(mailing_id, title=message.text)
    await state.set_state(MailingConstructor.editing_text)
    
    mailing = db.get_mailing(mailing_id)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: <b>{mailing['message_text'][:100]}...</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML",
        reply_markup=get_back_keyboard(f"view_mailing_{mailing_id}")
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message(MailingConstructor.editing_text)
async def edit_mailing_text(message: Message, state: FSMContext):
    if not message.html_text and not message.text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    
    text_content = message.html_text or message.text
    db.update_mailing(mailing_id, message_text=text_content)
    
    await state.set_state(MailingConstructor.editing_media)
    
    mailing = db.get_mailing(mailing_id)
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: <b>{mailing['message_type']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:",
        parse_mode="HTML",
        reply_markup=get_mailing_type_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.callback_query(MailingConstructor.editing_media, F.data.startswith("mailing_type_"))
async def edit_mailing_media_type(callback: CallbackQuery, state: FSMContext):
    media_type = callback.data.replace("mailing_type_", "")
    
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    
    if media_type == "text":
        db.update_mailing(mailing_id, message_type="text", media_file_id=None)
        await edit_mailing_finalize(callback, state)
    else:
        await state.update_data(editing_media_type=media_type)
        media_names = {
            "photo": "üñºÔ∏è —Ñ–æ—Ç–æ",
            "video": "üé• –≤–∏–¥–µ–æ", 
            "document": "üìé –¥–æ–∫—É–º–µ–Ω—Ç",
            "voice": "üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "video_note": "üìπ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        }
        
        await callback.message.answer(
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_names.get(media_type, '–º–µ–¥–∏–∞')} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_back_keyboard(f"view_mailing_{mailing_id}")
        )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(
    MailingConstructor.editing_media,
    F.content_type.in_({
        ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT,
        ContentType.VOICE, ContentType.VIDEO_NOTE
    })
)
async def edit_mailing_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media_type = data.get('editing_media_type')
    mailing_id = data.get('editing_mailing_id')
    
    media_file_id = None
    valid_content = False
    
    if media_type == "photo" and message.photo:
        media_file_id = message.photo[-1].file_id
        valid_content = True
    elif media_type == "video" and message.video:
        media_file_id = message.video.file_id
        valid_content = True
    elif media_type == "document" and message.document:
        media_file_id = message.document.file_id
        valid_content = True
    elif media_type == "voice" and message.voice:
        media_file_id = message.voice.file_id
        valid_content = True
    elif media_type == "video_note" and message.video_note:
        media_file_id = message.video_note.file_id
        valid_content = True
    
    if valid_content and media_file_id:
        db.update_mailing(mailing_id, message_type=media_type, media_file_id=media_file_id)
        await edit_mailing_finalize(message, state)
    else:
        await message.answer(f"‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è: {media_type}")

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
async def edit_mailing_finalize(update, state: FSMContext):
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    
    mailing = db.get_mailing(mailing_id)
    preview_text = format_mailing_preview(mailing)
    
    if update.__class__.__name__ == "CallbackQuery":
        message = update.message
        await message.answer(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + preview_text,
            parse_mode="HTML",
            reply_markup=get_mailing_actions_keyboard(mailing_id, mailing['status'])
        )
    else:
        message = update
        await message.answer(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + preview_text,
            parse_mode="HTML",
            reply_markup=get_mailing_actions_keyboard(mailing_id, mailing['status'])
        )
    
    await state.clear()

# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("archive_mailing_"))
async def archive_mailing(callback: CallbackQuery):
    mailing_id = int(callback.data.replace("archive_mailing_", ""))
    db.change_mailing_status(mailing_id, "archived")
    
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤")
    await callback.message.answer(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤",
        reply_markup=get_back_keyboard("admin_mailings")
    )

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("delete_mailing_"))
async def delete_mailing(callback: CallbackQuery):
    mailing_id = int(callback.data.replace("delete_mailing_", ""))
    db.change_mailing_status(mailing_id, "deleted")
    
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    await callback.message.answer(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=get_back_keyboard("admin_mailings")
    )

# –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_mailings")
async def exit_constructor(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    from utils.helpers import get_mailings_keyboard
    await callback.message.answer(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_mailings_keyboard(),
        parse_mode="HTML"
    )

    # –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
@router.callback_query(F.data.startswith("skip_edit_"))
async def skip_edit_media(callback: CallbackQuery, state: FSMContext):
    mailing_id = int(callback.data.replace("skip_edit_", ""))
    await edit_mailing_finalize(callback, state)
    await callback.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")