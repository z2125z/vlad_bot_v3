from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from services.database import db
from utils.helpers import (
    get_admin_main_keyboard,
    get_stats_keyboard,
    get_mailings_keyboard,
    get_users_keyboard,
    get_mailing_actions_keyboard,
    get_target_groups_keyboard,
    get_back_keyboard,
    format_stats_overview,
    format_users_stats,
    format_mailings_stats,
    format_mailing_preview
)
import config
from datetime import datetime, timedelta

router = Router()

def is_admin(user_id: int):
    return user_id in config.ADMIN_IDS

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )

# üìä –†–ê–ó–î–ï–õ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_stats_keyboard(),
        parse_mode="HTML"
    )

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "stats_overview")
async def stats_overview(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        format_stats_overview(),
        reply_markup=get_back_keyboard("admin_stats"),
        parse_mode="HTML"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "stats_users")
async def stats_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        format_users_stats(),
        reply_markup=get_back_keyboard("admin_stats"),
        parse_mode="HTML"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "stats_mailings")
async def stats_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        format_mailings_stats(),
        reply_markup=get_back_keyboard("admin_stats"),
        parse_mode="HTML"
    )

# üì® –†–ê–ó–î–ï–õ –†–ê–°–°–´–õ–û–ö
@router.callback_query(F.data == "admin_mailings")
async def admin_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_mailings_keyboard(),
        parse_mode="HTML"
    )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_active")
async def mailings_active(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    mailings = db.get_mailings_by_status('active')
    
    if not mailings:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫",
            reply_markup=get_back_keyboard("admin_mailings")
        )
        return
    
    text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
    for mailing in mailings:
        stats = db.get_mailing_stats(mailing.id)
        text += f"üì® {mailing.title}\n"
        text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
        text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {mailing.created_at.strftime('%d.%m.%Y')}\n"
        text += f"   [ID: {mailing.id}]\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("admin_mailings"),
        parse_mode="HTML"
    )

# –ß–µ—Ä–Ω–æ–≤–∏–∫–∏
@router.callback_query(F.data == "mailings_drafts")
async def mailings_drafts(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    mailings = db.get_mailings_by_status('draft')
    
    if not mailings:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫",
            reply_markup=get_back_keyboard("admin_mailings")
        )
        return
    
    text = "üìù <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
    for mailing in mailings:
        text += f"üìÑ {mailing.title}\n"
        text += f"   üïê –°–æ–∑–¥–∞–Ω: {mailing.created_at.strftime('%d.%m.%Y')}\n"
        text += f"   [ID: {mailing.id}]\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("admin_mailings"),
        parse_mode="HTML"
    )

# –ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "mailings_archive")
async def mailings_archive(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    mailings = db.get_mailings_by_status('archived')
    
    if not mailings:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ",
            reply_markup=get_back_keyboard("admin_mailings")
        )
        return
    
    text = "üìÅ <b>–ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
    for mailing in mailings:
        stats = db.get_mailing_stats(mailing.id)
        text += f"üì® {mailing.title}\n"
        text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
        text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {mailing.created_at.strftime('%d.%m.%Y')}\n"
        text += f"   [ID: {mailing.id}]\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("admin_mailings"),
        parse_mode="HTML"
    )

# –ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_send")
async def mailings_send(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    active_mailings = db.get_mailings_by_status('active')
    
    if not active_mailings:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
            reply_markup=get_back_keyboard("admin_mailings")
        )
        return
    
    text = "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
    keyboard = InlineKeyboardBuilder()
    
    for mailing in active_mailings:
        keyboard.add(InlineKeyboardButton(
            text=f"üì® {mailing.title}",
            callback_data=f"select_mailing_{mailing.id}"
        ))
    
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

# –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("select_mailing_"))
async def select_mailing_target(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    mailing_id = int(callback.data.replace("select_mailing_", ""))
    mailing = db.get_mailing(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    users_count = db.get_user_count()
    active_today = db.get_active_users_count_today()
    
    await callback.message.edit_text(
        f"üéØ <b>–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
        f"üì® –†–∞—Å—Å—ã–ª–∫–∞: <b>{mailing.title}</b>\n\n"
        f"üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
        f"   ‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count} —á–µ–ª.\n"
        f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: {active_today} —á–µ–ª.\n"
        f"   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {db.get_new_users_count()} —á–µ–ª.",
        reply_markup=get_target_groups_keyboard(mailing_id),
        parse_mode="HTML"
    )

# üë• –†–ê–ó–î–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_users_keyboard(),
        parse_mode="HTML"
    )

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "users_list")
async def users_list(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    users = db.get_all_users()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    if not users:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=get_back_keyboard("admin_users")
        )
        return
    
    text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
        status = "üü¢" if user.is_active else "üî¥"
        text += f"{status} {user.full_name}\n"
        text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
        text += f"   üïê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.joined_at.strftime('%d.%m.%Y')}\n\n"
    
    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("admin_users"),
        parse_mode="HTML"
    )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "users_active_today")
async def users_active_today(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    users = db.get_active_users_today()[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑
    
    if not users:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            reply_markup=get_back_keyboard("admin_users")
        )
        return
    
    text = "üìÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
    for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
        text += f"üü¢ {user.full_name}\n"
        text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
        text += f"   ‚è∞ –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω: {user.last_activity.strftime('%H:%M')}\n\n"
    
    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("admin_users"),
        parse_mode="HTML"
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_main")
async def admin_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )