from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.database import db
from services.mailing import MailingService
from utils.helpers import (
    get_admin_keyboard, 
    get_mailings_keyboard, 
    get_back_keyboard,
    format_user_stats,
    format_mailing_stats
)
from datetime import datetime, timedelta
import config

router = Router()

class MailingState(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_confirmation = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int):
    return user_id in config.ADMIN_IDS

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    users_count = db.get_user_count()
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    active_today = users_count  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø–æ last_activity
    
    await callback.message.edit_text(
        format_user_stats(users_count, active_today),
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )

# –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "admin_mailings")
async def admin_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>",
        reply_markup=get_mailings_keyboard(),
        parse_mode="HTML"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - —à–∞–≥ 1
@router.callback_query(F.data == "create_mailing")
async def create_mailing_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(MailingState.waiting_for_title)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_back_keyboard()
    )

# –®–∞–≥ 2 - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(MailingState.waiting_for_title)
async def mailing_get_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(MailingState.waiting_for_content)
    
    await message.answer(
        "üìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.",
        reply_markup=get_back_keyboard()
    )

# –®–∞–≥ 3 - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.message(MailingState.waiting_for_content)
async def mailing_get_content(message: Message, state: FSMContext, bot: Bot):
    mailing_data = await state.get_data()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = "text"
    file_id = None
    
    if message.photo:
        message_type = "photo"
        file_id = message.photo[-1].file_id
        text = message.caption or ""
    elif message.document:
        message_type = "document"
        file_id = message.document.file_id
        text = message.caption or ""
    else:
        text = message.text or message.html_text or ""
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î
    mailing = db.create_mailing(
        title=mailing_data['title'],
        message_text=text,
        message_type=message_type,
        file_id=file_id
    )
    
    await state.update_data(mailing_id=mailing.id)
    await state.set_state(MailingState.waiting_for_confirmation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    preview_text = f"üìã <b>–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{text}"
    
    try:
        if message_type == "text":
            await message.answer(preview_text, parse_mode="HTML")
        elif message_type == "photo":
            await message.answer_photo(file_id, caption=preview_text, parse_mode="HTML")
        elif message_type == "document":
            await message.answer_document(file_id, caption=preview_text, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
        await state.clear()
        return
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_main"))
    
    await message.answer(
        "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=keyboard.as_markup()
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "confirm_mailing")
async def confirm_mailing(callback: CallbackQuery, state: FSMContext, bot: Bot):
    mailing_data = await state.get_data()
    await state.clear()
    
    mailing_service = MailingService(bot)
    users = db.get_all_users()
    
    await callback.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success_count, total_count = await mailing_service.broadcast_mailing(
        mailing_id=mailing_data['mailing_id'],
        users=users
    )
    
    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{total_count}\n"
        f"üìä –£—Å–ø–µ—à–Ω—ã—Ö: {(success_count/total_count*100 if total_count > 0 else 0):.1f}%"
    )

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_main")
async def admin_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )