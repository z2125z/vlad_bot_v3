from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.helpers import (
    get_admin_main_keyboard,
    get_stats_keyboard,
    get_mailings_keyboard,
    get_users_keyboard,
    get_target_groups_keyboard,
    get_back_keyboard,
    get_logs_keyboard
)
import config
import os
from services.logger import logger
from datetime import datetime, timedelta

router = Router()

def is_admin(user_id: int):
    return user_id in config.ADMIN_IDS

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )

# üìä –†–ê–ó–î–ï–õ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_stats_keyboard(),
        parse_mode="HTML"
    )

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "stats_overview")
async def stats_overview(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from utils.helpers import format_stats_overview
        stats_text = format_stats_overview()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "stats_users")
async def stats_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from utils.helpers import format_users_stats
        stats_text = format_users_stats()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "stats_mailings")
async def stats_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from utils.helpers import format_mailings_stats
        stats_text = format_mailings_stats()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {str(e)}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# üì® –†–ê–ó–î–ï–õ –†–ê–°–°–´–õ–û–ö
@router.callback_query(F.data == "admin_mailings")
async def admin_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_mailings_keyboard(),
        parse_mode="HTML"
    )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_active")
async def mailings_active(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailings = db.get_mailings_by_status('active')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        keyboard = InlineKeyboardBuilder()
        
        for mailing in mailings:
            stats = db.get_mailing_stats(mailing['id'])
            created_at = mailing['created_at'].strftime('%d.%m.%Y') if mailing['created_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"üì® {mailing['title']}\n"
            text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
            text += f"   [ID: {mailing['id']}]\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
            keyboard.add(InlineKeyboardButton(
                text=f"üìù {mailing['title'][:20]}...",
                callback_data=f"view_mailing_{mailing['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ß–µ—Ä–Ω–æ–≤–∏–∫–∏
@router.callback_query(F.data == "mailings_drafts")
async def mailings_drafts(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailings = db.get_mailings_by_status('draft')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üìù <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
        keyboard = InlineKeyboardBuilder()
        
        for mailing in mailings:
            created_at = mailing['created_at'].strftime('%d.%m.%Y') if mailing['created_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"üìÑ {mailing['title']}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω: {created_at}\n"
            text += f"   [ID: {mailing['id']}]\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
            keyboard.add(InlineKeyboardButton(
                text=f"üìù {mailing['title'][:20]}...",
                callback_data=f"view_mailing_{mailing['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "mailings_archive")
async def mailings_archive(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailings = db.get_mailings_by_status('archived')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üìÅ <b>–ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
        keyboard = InlineKeyboardBuilder()
        
        for mailing in mailings:
            stats = db.get_mailing_stats(mailing['id'])
            created_at = mailing['created_at'].strftime('%d.%m.%Y') if mailing['created_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"üì® {mailing['title']}\n"
            text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
            text += f"   [ID: {mailing['id']}]\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
            keyboard.add(InlineKeyboardButton(
                text=f"üìù {mailing['title'][:20]}...",
                callback_data=f"view_mailing_{mailing['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )
        
# –ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_send")
async def mailings_send(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        active_mailings = db.get_mailings_by_status('active')
        
        if not active_mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        keyboard = InlineKeyboardBuilder()
        
        for mailing in active_mailings:
            keyboard.add(InlineKeyboardButton(
                text=f"üì® {mailing['title']}",
                callback_data=f"select_mailing_{mailing['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("select_mailing_"))
async def select_mailing_target(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailing_id = int(callback.data.replace("select_mailing_", ""))
        mailing = db.get_mailing(mailing_id)
        
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        users_count = db.get_user_count()
        active_today = db.get_active_users_count_today()
        new_week = db.get_new_users_count_week()
        new_month = db.get_new_users_count_month()
        
        await callback.message.edit_text(
            f"üéØ <b>–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
            f"üì® –†–∞—Å—Å—ã–ª–∫–∞: <b>{mailing['title']}</b>\n\n"
            f"üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
            f"   ‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count} —á–µ–ª.\n"
            f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: {active_today} —á–µ–ª.\n"
            f"   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π): {new_week} —á–µ–ª.\n"
            f"   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (30 –¥–Ω–µ–π): {new_month} —á–µ–ª.",
            reply_markup=get_target_groups_keyboard(mailing_id),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("mailings_send")
        )

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
@router.callback_query(F.data.startswith("target:"))
async def start_mailing_broadcast(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        from utils.helpers import get_target_group_name
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä callback_data
        data_parts = callback.data.split(":")
        if len(data_parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        target_group = data_parts[1]  # all, active, new_week, new_month
        mailing_id = int(data_parts[2])
        
        mailing = db.get_mailing(mailing_id)
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        from services.mailing import MailingService
        mailing_service = MailingService(bot)
        
        await callback.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        success, success_count, total_count = await mailing_service.broadcast_mailing(
            mailing_id=mailing_id,
            target_group=target_group
        )
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {mailing['title']}\n"
                f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {get_target_group_name(target_group)}\n"
                f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"üìä <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {(success_count/total_count*100 if total_count > 0 else 0):.1f}%",
                parse_mode="HTML",
                reply_markup=get_back_keyboard("admin_mailings")
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ",
                reply_markup=get_back_keyboard("admin_mailings")
            )
    except Exception as e:
        logger.error(f"Error starting mailing broadcast: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# üë• –†–ê–ó–î–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_users_keyboard(),
        parse_mode="HTML"
    )

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "users_list")
async def users_list(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        users = db.get_all_users()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        if not users:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=get_back_keyboard("admin_users")
            )
            return
        
        text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
            status = "üü¢" if user.is_active else "üî¥"
            text += f"{status} {user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
            text += f"   üÜî ID: {user.user_id}\n"
            text += f"   üïê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.joined_at.strftime('%d.%m.%Y')}\n\n"
        
        if len(users) > 10:
            text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "users_active_today")
async def users_active_today(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        users = db.get_active_users_today()[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑
        
        if not users:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                reply_markup=get_back_keyboard("admin_users")
            )
            return
        
        text = "üìÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
            text += f"üü¢ {user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
            text += f"   ‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%H:%M')}\n\n"
        
        if len(users) > 10:
            text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "users_analytics")
async def users_analytics(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        total_users = db.get_user_count()
        active_today = db.get_active_users_count_today()
        active_week = db.get_active_users_count_week()
        new_today = db.get_new_users_count(days=1)
        new_week = db.get_new_users_count_week()
        new_month = db.get_new_users_count_month()
        
        today_rate = (active_today / total_users * 100) if total_users > 0 else 0
        week_rate = (active_week / total_users * 100) if total_users > 0 else 0
        
        text = f"""
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}
   ‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}
   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}
   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_month}

üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_rate:.1f}%
   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_rate:.1f}%

üìÖ <b>–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏:</b>
   ‚Ä¢ –†–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: +{new_week} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   ‚Ä¢ –†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü: +{new_month} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_main")
async def admin_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
@router.callback_query(F.data == "export_excel")
async def export_to_excel(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        from services.excel_export import ExcelExporter
        exporter = ExcelExporter()
        filepath = exporter.generate_full_report()
        
        if not filepath:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                reply_markup=get_back_keyboard("admin_stats")
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = FSInputFile(filepath)
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=file,
            caption="üìä <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –±–æ—Ç–∞</b>\n\n"
                   "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ª–∏—Å—Ç—ã:\n"
                   "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                   "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö\n"
                   "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–æ–∫\n"
                   "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                   "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(filepath)
        except:
            pass
            
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
        exporter.cleanup_old_exports()
        
        await callback.message.edit_text(
            "‚úÖ <b>Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_stats")
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("view_mailing_"))
async def view_mailing(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        from utils.helpers import format_mailing_preview, get_mailing_actions_keyboard
        
        mailing_id = int(callback.data.replace("view_mailing_", ""))
        mailing = db.get_mailing(mailing_id)
        
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        preview_text = format_mailing_preview(mailing)
        await callback.message.edit_text(
            preview_text,
            parse_mode="HTML",
            reply_markup=get_mailing_actions_keyboard(mailing_id, mailing['status'])
        )
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("archive_mailing_"))
async def archive_mailing(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailing_id = int(callback.data.replace("archive_mailing_", ""))
        db.change_mailing_status(mailing_id, "archived")
        
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤")
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤",
            reply_markup=get_back_keyboard("admin_mailings")
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("activate_mailing_"))
async def activate_mailing(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailing_id = int(callback.data.replace("activate_mailing_", ""))
        db.change_mailing_status(mailing_id, "active")
        
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ",
            reply_markup=get_back_keyboard("admin_mailings")
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("delete_mailing_"))
async def delete_mailing(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailing_id = int(callback.data.replace("delete_mailing_", ""))
        db.change_mailing_status(mailing_id, "deleted")
        
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=get_back_keyboard("admin_mailings")
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("send_mailing_"))
async def send_specific_mailing(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.database import db
        
        mailing_id = int(callback.data.replace("send_mailing_", ""))
        mailing = db.get_mailing(mailing_id)
        
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await callback.message.edit_text(
            f"üéØ <b>–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"üì® –†–∞—Å—Å—ã–ª–∫–∞: <b>{mailing['title']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=get_target_groups_keyboard(mailing_id),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
@router.callback_query(F.data == "get_logs")
async def get_logs_menu(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text(
            "üìã <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤:",
            reply_markup=get_logs_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in get_logs_menu: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard("admin_stats")
        )

@router.callback_query(F.data == "logs_current")
async def send_current_month_logs(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text("üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ª–æ–≥–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü...")
        
        current_month = datetime.now().strftime('%Y%m')
        log_file_path = logger.get_log_file_path(current_month)
        
        if not os.path.exists(log_file_path):
            await callback.message.edit_text(
                "‚ùå –õ–æ–≥–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_back_keyboard("get_logs")
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
        file = FSInputFile(log_file_path)
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=file,
            caption=f"üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</b>\n\n"
                   f"–§–∞–π–ª: <code>bot_{current_month}.log</code>\n"
                   f"–†–∞–∑–º–µ—Ä: {os.path.getsize(log_file_path) / 1024:.1f} –ö–ë",
            parse_mode="HTML"
        )
        
        await callback.message.edit_text(
            "‚úÖ –õ–æ–≥–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
            reply_markup=get_back_keyboard("admin_stats")
        )
        
        logger.log_admin_action(callback.from_user.id, "downloaded current month logs")
        
    except Exception as e:
        logger.error(f"Error sending current month logs: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard("get_logs")
        )

@router.callback_query(F.data == "logs_previous")
async def send_previous_month_logs(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text("üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ª–æ–≥–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        first_day = datetime.now().replace(day=1)
        previous_month = (first_day - timedelta(days=1)).strftime('%Y%m')
        log_file_path = logger.get_log_file_path(previous_month)
        
        if not os.path.exists(log_file_path):
            await callback.message.edit_text(
                "‚ùå –õ–æ–≥–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_back_keyboard("get_logs")
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
        file = FSInputFile(log_file_path)
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=file,
            caption=f"üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü</b>\n\n"
                   f"–§–∞–π–ª: <code>bot_{previous_month}.log</code>\n"
                   f"–†–∞–∑–º–µ—Ä: {os.path.getsize(log_file_path) / 1024:.1f} –ö–ë",
            parse_mode="HTML"
        )
        
        await callback.message.edit_text(
            "‚úÖ –õ–æ–≥–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
            reply_markup=get_back_keyboard("admin_stats")
        )
        
        logger.log_admin_action(callback.from_user.id, "downloaded previous month logs")
        
    except Exception as e:
        logger.error(f"Error sending previous month logs: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard("get_logs")
        )

@router.callback_query(F.data == "logs_all")
async def send_all_logs(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text("üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏...")
        
        available_logs = logger.get_available_logs()
        
        if not available_logs:
            await callback.message.edit_text(
                "‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_back_keyboard("get_logs")
            )
            return
        
        sent_count = 0
        for log_info in available_logs:
            try:
                file = FSInputFile(log_info['path'])
                await bot.send_document(
                    chat_id=callback.from_user.id,
                    document=file,
                    caption=f"üìã <b>–õ–æ–≥ –±–æ—Ç–∞</b>\n\n"
                           f"–ü–µ—Ä–∏–æ–¥: {log_info['date'].strftime('%B %Y')}\n"
                           f"–§–∞–π–ª: <code>{log_info['filename']}</code>\n"
                           f"–†–∞–∑–º–µ—Ä: {os.path.getsize(log_info['path']) / 1024:.1f} –ö–ë",
                    parse_mode="HTML"
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"Error sending log file {log_info['filename']}: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –∏–∑ {len(available_logs)}!",
            reply_markup=get_back_keyboard("admin_stats")
        )
        
        logger.log_admin_action(callback.from_user.id, f"downloaded all logs ({sent_count} files)")
        
    except Exception as e:
        logger.error(f"Error sending all logs: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard("get_logs")
        )