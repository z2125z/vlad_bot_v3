from aiogram import Bot
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
import asyncio
import config

class MailingService:
    def __init__(self, bot: Bot):
        self.bot = bot

    def _create_keyboard(self, buttons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not buttons:
            return None
            
        keyboard = InlineKeyboardBuilder()
        for button in buttons:
            if button.get('url'):
                keyboard.add(InlineKeyboardButton(
                    text=button['text'], 
                    url=button['url']
                ))
            elif button.get('callback_data'):
                keyboard.add(InlineKeyboardButton(
                    text=button['text'],
                    callback_data=button['callback_data']
                ))
        return keyboard.as_markup()

    async def send_mailing(self, mailing_id: int, user_id: int, target_group: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        from services.database import db  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        from utils.timezone import get_moscow_time, moscow_to_utc
        
        mailing = db.get_mailing(mailing_id)
        if not mailing:
            return False, None

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db.add_mailing_stats(mailing_id, user_id, target_group)
        if not stats:
            return False, None

        keyboard = self._create_keyboard(mailing['buttons'])

        try:
            message = None
            
            if mailing['message_type'] == "text":
                message = await self.bot.send_message(
                    chat_id=user_id,
                    text=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "photo":
                message = await self.bot.send_photo(
                    chat_id=user_id,
                    photo=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "video":
                message = await self.bot.send_video(
                    chat_id=user_id,
                    video=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "document":
                message = await self.bot.send_document(
                    chat_id=user_id,
                    document=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "voice":
                message = await self.bot.send_voice(
                    chat_id=user_id,
                    voice=mailing['media_file_id'],
                    caption=mailing['message_text'],
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            elif mailing['message_type'] == "video_note":
                # –î–ª—è –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                message = await self.bot.send_video_note(
                    chat_id=user_id,
                    video_note=mailing['media_file_id']
                )
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if mailing['message_text']:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=mailing['message_text'],
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            if message:
                db.update_mailing_stats(stats.id, 
                    sent=True, 
                    delivered=True,
                    delivered_at=moscow_to_utc(get_moscow_time())
                )
                return True, message.message_id
            else:
                db.update_mailing_stats(stats.id, sent=True, delivered=False)
                return False, None
            
        except TelegramForbiddenError as e:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            print(f"User {user_id} blocked the bot: {e}")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None
        except TelegramBadRequest as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram (–Ω–µ–≤–µ—Ä–Ω—ã–π chat_id –∏ —Ç.–¥.)
            print(f"Failed to send to {user_id}: {e}")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None
        except Exception as e:
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            print(f"Error sending to {user_id}: {e}")
            db.update_mailing_stats(stats.id, sent=True, delivered=False)
            return False, None

    async def broadcast_mailing(self, mailing_id: int, target_group: str = "all"):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from services.database import db  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        
        mailing = db.get_mailing(mailing_id)
        if not mailing or mailing['status'] != "active":
            return False, 0, 0

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
        if target_group == "all":
            users = db.get_all_users()
            target_name = "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif target_group == "active":
            users = db.get_active_users_today()
            target_name = "–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è"
        elif target_group == "new":
            users = db.get_new_users(days=7)  # –ù–æ–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            target_name = "–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        else:
            users = db.get_all_users()
            target_name = "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

        if not users:
            return False, 0, 0

        success_count = 0
        total_count = len(users)
        errors = []
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        progress_message = None
        try:
            progress_message = await self.bot.send_message(
                chat_id=config.ADMIN_IDS[0],  # –ü–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
                text=f"üîÑ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É</b>\n\n"
                     f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {mailing['title']}\n"
                     f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {target_name}\n"
                     f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_count}\n"
                     f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> 0/{total_count} (0%)\n"
                     f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> 0\n"
                     f"‚ùå <b>–û—à–∏–±–∫–∏:</b> 0",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        for index, user in enumerate(users):
            success, message_id = await self.send_mailing(
                mailing_id=mailing_id,
                user_id=user.user_id,
                target_group=target_group
            )
            
            if success:
                success_count += 1
            else:
                errors.append(user.user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–∞–∂–¥—ã–µ 10%
            if (index + 1) % 10 == 0 or index == total_count - 1:
                progress = (index + 1) / total_count * 100
                error_count = len(errors)
                
                try:
                    if progress_message:
                        await progress_message.edit_text(
                            f"üîÑ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                            f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {mailing['title']}\n"
                            f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {target_name}\n"
                            f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_count}\n"
                            f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {index + 1}/{total_count} ({progress:.1f}%)\n"
                            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {success_count}\n"
                            f"‚ùå <b>–û—à–∏–±–∫–∏:</b> {error_count}",
                            parse_mode="HTML"
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
            await asyncio.sleep(0.05)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        final_message = (
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {mailing['title']}\n"
            f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {target_name}\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_count}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {len(errors)}\n"
            f"üìä <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {success_rate:.1f}%"
        )
        
        if errors:
            final_message += f"\n\n‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {len(errors)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        try:
            if progress_message:
                await progress_message.edit_text(final_message, parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self.bot.send_message(
                    chat_id=config.ADMIN_IDS[0],
                    text=final_message,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return True, success_count, total_count