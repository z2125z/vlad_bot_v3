from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from services.database import db
from services.mailing import MailingService
from services.excel_export import ExcelExporter  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from utils.helpers import (
    get_admin_main_keyboard,
    get_stats_keyboard,
    get_mailings_keyboard,
    get_users_keyboard,
    get_target_groups_keyboard,
    get_back_keyboard,
    format_stats_overview,
    format_users_stats,
    format_mailings_stats
)
import config
from datetime import datetime, timedelta
import os

router = Router()

def is_admin(user_id: int):
    return user_id in config.ADMIN_IDS

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )

# üìä –†–ê–ó–î–ï–õ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_stats_keyboard(),
        parse_mode="HTML"
    )

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "stats_overview")
async def stats_overview(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats_text = format_stats_overview()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "stats_users")
async def stats_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats_text = format_users_stats()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "stats_mailings")
async def stats_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats_text = format_mailings_stats()
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("admin_stats"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}",
            reply_markup=get_back_keyboard("admin_stats")
        )

# üì® –†–ê–ó–î–ï–õ –†–ê–°–°–´–õ–û–ö
@router.callback_query(F.data == "admin_mailings")
async def admin_mailings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_mailings_keyboard(),
        parse_mode="HTML"
    )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_active")
async def mailings_active(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        mailings = db.get_mailings_by_status('active')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        for mailing in mailings:
            stats = db.get_mailing_stats(mailing.id)
            text += f"üì® {mailing.title}\n"
            text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {mailing.created_at.strftime('%d.%m.%Y')}\n"
            text += f"   [ID: {mailing.id}]\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_mailings"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ß–µ—Ä–Ω–æ–≤–∏–∫–∏
@router.callback_query(F.data == "mailings_drafts")
async def mailings_drafts(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        mailings = db.get_mailings_by_status('draft')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üìù <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
        for mailing in mailings:
            text += f"üìÑ {mailing.title}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω: {mailing.created_at.strftime('%d.%m.%Y')}\n"
            text += f"   [ID: {mailing.id}]\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_mailings"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "mailings_archive")
async def mailings_archive(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        mailings = db.get_mailings_by_status('archived')
        
        if not mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üìÅ <b>–ê—Ä—Ö–∏–≤ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
        for mailing in mailings:
            stats = db.get_mailing_stats(mailing.id)
            text += f"üì® {mailing.title}\n"
            text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['delivered']}/{stats['total_sent']}\n"
            text += f"   üïê –°–æ–∑–¥–∞–Ω–∞: {mailing.created_at.strftime('%d.%m.%Y')}\n"
            text += f"   [ID: {mailing.id}]\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_mailings"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "mailings_send")
async def mailings_send(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        active_mailings = db.get_mailings_by_status('active')
        
        if not active_mailings:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                reply_markup=get_back_keyboard("admin_mailings")
            )
            return
        
        text = "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        keyboard = InlineKeyboardBuilder()
        
        for mailing in active_mailings:
            keyboard.add(InlineKeyboardButton(
                text=f"üì® {mailing.title}",
                callback_data=f"select_mailing_{mailing.id}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_mailings"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

# –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("select_mailing_"))
async def select_mailing_target(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        mailing_id = int(callback.data.replace("select_mailing_", ""))
        mailing = db.get_mailing(mailing_id)
        
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        users_count = db.get_user_count()
        active_today = db.get_active_users_count_today()
        new_users = db.get_new_users_count(days=7)
        
        await callback.message.edit_text(
            f"üéØ <b>–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
            f"üì® –†–∞—Å—Å—ã–ª–∫–∞: <b>{mailing.title}</b>\n\n"
            f"üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
            f"   ‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count} —á–µ–ª.\n"
            f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: {active_today} —á–µ–ª.\n"
            f"   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π): {new_users} —á–µ–ª.",
            reply_markup=get_target_groups_keyboard(mailing_id),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}",
            reply_markup=get_back_keyboard("mailings_send")
        )

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("target_"))
async def start_mailing_broadcast(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        data_parts = callback.data.split("_")
        if len(data_parts) < 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        target_group = data_parts[1]  # all, active –∏–ª–∏ new
        mailing_id = int(data_parts[2])
        
        mailing = db.get_mailing(mailing_id)
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        mailing_service = MailingService(bot)
        
        await callback.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        success, success_count, total_count = await mailing_service.broadcast_mailing(
            mailing_id=mailing_id,
            target_group=target_group
        )
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {mailing.title}\n"
                f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {get_target_group_name(target_group)}\n"
                f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"üìä <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {(success_count/total_count*100 if total_count > 0 else 0):.1f}%",
                parse_mode="HTML",
                reply_markup=get_back_keyboard("admin_mailings")
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ",
                reply_markup=get_back_keyboard("admin_mailings")
            )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}",
            reply_markup=get_back_keyboard("admin_mailings")
        )

def get_target_group_name(target_group: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    names = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è", 
        "new": "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    }
    return names.get(target_group, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")

# üë• –†–ê–ó–î–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_users_keyboard(),
        parse_mode="HTML"
    )

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "users_list")
async def users_list(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        users = db.get_all_users()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        if not users:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=get_back_keyboard("admin_users")
            )
            return
        
        text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
            status = "üü¢" if user.is_active else "üî¥"
            text += f"{status} {user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
            text += f"   üÜî ID: {user.user_id}\n"
            text += f"   üïê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.joined_at.strftime('%d.%m.%Y')}\n\n"
        
        if len(users) > 10:
            text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "users_active_today")
async def users_active_today(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        users = db.get_active_users_today()[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑
        
        if not users:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                reply_markup=get_back_keyboard("admin_users")
            )
            return
        
        text = "üìÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        for user in users[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
            text += f"üü¢ {user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"   üë§ @{user.username or '–±–µ–∑ username'}\n"
            text += f"   ‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%H:%M')}\n\n"
        
        if len(users) > 10:
            text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "users_analytics")
async def users_analytics(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        total_users = db.get_user_count()
        active_today = db.get_active_users_count_today()
        active_week = db.get_active_users_count_week()
        new_today = db.get_new_users_count(days=1)
        new_week = db.get_new_users_count(days=7)
        
        today_rate = (active_today / total_users * 100) if total_users > 0 else 0
        week_rate = (active_week / total_users * 100) if total_users > 0 else 0
        
        text = f"""
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}
   ‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}
   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}

üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_rate:.1f}%
   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_rate:.1f}%

üìÖ <b>–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏:</b>
   ‚Ä¢ –†–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: +{new_week} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("admin_users"),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}",
            reply_markup=get_back_keyboard("admin_users")
        )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_main")
async def admin_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
@router.callback_query(F.data == "export_excel")
async def export_to_excel(callback: CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await callback.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        exporter = ExcelExporter()
        filepath = exporter.generate_full_report()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = FSInputFile(filepath)
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=file,
            caption="üìä <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –±–æ—Ç–∞</b>\n\n"
                   "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ª–∏—Å—Ç—ã:\n"
                   "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                   "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö\n"
                   "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–æ–∫\n"
                   "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                   "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(filepath)
        except:
            pass
            
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
        exporter.cleanup_old_exports()
        
        await callback.message.edit_text(
            "‚úÖ <b>Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_stats")
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}",
            reply_markup=get_back_keyboard("admin_stats")
        )