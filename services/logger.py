import logging
import os
from datetime import datetime
from typing import Optional
import traceback

class BotLogger:
    def __init__(self, log_dir: str = "logs"):
        self.log_dir = log_dir
        self._setup_logging()
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not os.path.exists(self.log_dir):
            os.makedirs(self.log_dir)
        
        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        date_format = '%Y-%m-%d %H:%M:%S'
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('telegram_bot')
        self.logger.setLevel(logging.INFO)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        log_file = os.path.join(self.log_dir, f"bot_{datetime.now().strftime('%Y%m')}.log")
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        file_formatter = logging.Formatter(log_format, datefmt=date_format)
        file_handler.setFormatter(file_formatter)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(log_format, datefmt=date_format)
        console_handler.setFormatter(console_formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
    
    def info(self, message: str, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if user_id:
            message = f"[User:{user_id}] {message}"
        self.logger.info(message)
    
    def error(self, message: str, user_id: Optional[int] = None, exc_info: bool = False):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        if user_id:
            message = f"[User:{user_id}] {message}"
        self.logger.error(message, exc_info=exc_info)
    
    def warning(self, message: str, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        if user_id:
            message = f"[User:{user_id}] {message}"
        self.logger.warning(message)
    
    def debug(self, message: str, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if user_id:
            message = f"[User:{user_id}] {message}"
        self.logger.debug(message)
    
    def log_mailing_start(self, mailing_id: int, mailing_title: str, target_group: str, total_users: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.info(f"üì® Starting mailing: ID={mailing_id}, Title='{mailing_title}', "
                 f"Target={target_group}, Users={total_users}")
    
    def log_mailing_progress(self, mailing_id: int, current: int, total: int, success_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        progress = (current / total * 100) if total > 0 else 0
        self.info(f"üì® Mailing {mailing_id} progress: {current}/{total} ({progress:.1f}%), "
                 f"Success: {success_count}")
    
    def log_mailing_complete(self, mailing_id: int, success_count: int, total: int, errors: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        success_rate = (success_count / total * 100) if total > 0 else 0
        self.info(f"üì® Mailing {mailing_id} completed: {success_count}/{total} ({success_rate:.1f}%), "
                 f"Errors: {errors}")
    
    def log_user_activity(self, user_id: int, action: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.info(f"üë§ User activity: {action}", user_id=user_id)
    
    def log_admin_action(self, admin_id: int, action: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.info(f"üë®‚Äçüíª Admin action: {action}", user_id=admin_id)
    
    def get_log_file_path(self, month: Optional[str] = None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞"""
        if month is None:
            month = datetime.now().strftime('%Y%m')
        return os.path.join(self.log_dir, f"bot_{month}.log")
    
    def get_available_logs(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
        if not os.path.exists(self.log_dir):
            return []
        
        log_files = []
        for file in os.listdir(self.log_dir):
            if file.startswith('bot_') and file.endswith('.log'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                date_str = file[4:-4]  # –£–±–∏—Ä–∞–µ–º 'bot_' –∏ '.log'
                try:
                    date = datetime.strptime(date_str, '%Y%m')
                    log_files.append({
                        'filename': file,
                        'date': date,
                        'path': os.path.join(self.log_dir, file)
                    })
                except ValueError:
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        log_files.sort(key=lambda x: x['date'], reverse=True)
        return log_files

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = BotLogger()